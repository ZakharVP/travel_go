//
//  MainAppView.swift
//  travel_go
//
//  Created by –ó–∞—Ö–∞—Ä –ü–∞–Ω—á–µ–Ω–∫–æ on 11.08.2025.
//

import SwiftUI
import OpenAPIURLSession

struct ConsoleScreenView: View {
   
    @State private var copyrightInfo: String = "–ó–∞–≥—Ä—É–∑–∫–∞..."
    @State private var stationsInfo: String = ""
    
    var body: some View { 
        VStack {
            Image(systemName: "globe")
                .imageScale(.large)
                .foregroundStyle(.tint)
            Text("üü¢  Hello, World!")
        }
        .padding()
        .onAppear() {
            // –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–π—Å–æ–≤ –º–µ–∂–¥—É —Å—Ç–∞–Ω—Ü–∏—è–º–∏ +
            fetchSearch()
            
            // –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–π—Å–æ–≤ –ø–æ —Å—Ç–∞–Ω—Ü–∏–∏ +
            fetchSchedule()
            
            // –°–ø–∏—Å–æ–∫ —Å—Ç–∞–Ω—Ü–∏–π —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è +
            //fetchThreadManually()
            fetchThread()
            
            // –°–ø–∏—Å–æ–∫ –±–ª–∏–∂–∞–π—à–∏—Ö —Å—Ç–∞–Ω—Ü–∏–π +
            testFetchStations()
            
            // –ë–ª–∏–∂–∞–π—à–∏–π –≥–æ—Ä–æ–¥ +
            fetchNearestCity()
            
            // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–µ +
            //testCarrierRequest()
            fetchCarrier()
            
            // –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç–∞–Ω—Ü–∏–π +
            fetchAllStations()
            
            // –ö–æ–ø–∏—Ä–∞–π—Ç +
            fetchCopyright()
    
        }
    }
    
    //–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    func fetchAllStationsOld() {
        let urlString = "https://api.rasp.yandex.net/v3.0/stations_list/?apikey=\(APIKeys.yandexStationKey)&lang=ru_RU&format=json"
        
        guard let url = URL(string: urlString) else {
            print("üî¥ –ù–µ–≤–µ—Ä–Ω—ã–π URL")
            return
        }
        
        URLSession.shared.dataTask(with: url) { data, response, error in
            if let error = error {
                print("üî¥ –û—à–∏–±–∫–∞: \(error.localizedDescription)")
                return
            }
            
            guard let data = data else {
                print("üî¥ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–≤–µ—Ç–µ")
                return
            }
            
            do {
                let decoder = JSONDecoder()
                let stationsResponse = try decoder.decode(AllStationsResponse.self, from: data)
                
                print("üü¢ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ")
                
                var first10Stations: [Components.Schemas.Station] = []
                var stationCount = 0
                
                if let countries = stationsResponse.countries {
                    for country in countries {
                        if let regions = country.regions {
                            for region in regions {
                                if let settlements = region.settlements {
                                    for settlement in settlements {
                                        if let stations = settlement.stations {
                                            for station in stations {
                                                if stationCount < 10 {
                                                    first10Stations.append(station)
                                                    stationCount += 1
                                                } else {
                                                    break
                                                }
                                            }
                                        }
                                        if stationCount >= 10 { break }
                                    }
                                }
                                if stationCount >= 10 { break }
                            }
                        }
                        if stationCount >= 10 { break }
                    }
                }
                
                print("\nüü¢ –ü–µ—Ä–≤—ã–µ 10 —Å—Ç–∞–Ω—Ü–∏–π:")
                print("========================")
                
                for (index, station) in first10Stations.enumerated() {
                    print("\(index + 1). \(station.title ?? "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")")
                    print("   üÜî –ö–æ–¥: \(station.codes?.yandex_code ?? "–Ω–µ—Ç –∫–æ–¥–∞")")
                    print("   üöä –¢–∏–ø: \(station.transport_type ?? "–Ω–µ —É–∫–∞–∑–∞–Ω")")
                    print("   üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: \(station.lat ?? 0), \(station.lng ?? 0)")
                    print("   üè∑Ô∏è –¢–∏–ø —Å—Ç–∞–Ω—Ü–∏–∏: \(station.station_type ?? "–Ω–µ —É–∫–∞–∑–∞–Ω")")
                    print("========================")
                }
                
            } catch {
                print("üî¥ –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: \(error.localizedDescription)")
                if let rawResponse = String(data: data, encoding: .utf8) {
                    print("–°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:")
                    print(rawResponse)
                }
            }
        }.resume()
    }
    
    func fetchAllStations() {
        Task {
            do {
                
                let client = Client(
                    serverURL: try Servers.Server1.url(),
                    transport: URLSessionTransport()
                )
                
                print("üü° –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å—Ç–∞–Ω—Ü–∏–π...")
                
                let service = AllStationsService(
                    client: client,
                    apiKey: APIKeys.yandexStationKey
                )
                
                let stationsResponse = try await service.getAllStations()
                
                // –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
                var first10Stations: [Components.Schemas.Station] = []
                var stationCount = 0
                
                if let countries = stationsResponse.countries {
                    for country in countries {
                        if let regions = country.regions {
                            for region in regions {
                                if let settlements = region.settlements {
                                    for settlement in settlements {
                                        if let stations = settlement.stations {
                                            for station in stations {
                                                if stationCount < 10 {
                                                    first10Stations.append(station)
                                                    stationCount += 1
                                                } else {
                                                    break
                                                }
                                            }
                                        }
                                        if stationCount >= 10 { break }
                                    }
                                }
                                if stationCount >= 10 { break }
                            }
                        }
                        if stationCount >= 10 { break }
                    }
                }
                
                print("\nüü¢ –ü–µ—Ä–≤—ã–µ 10 —Å—Ç–∞–Ω—Ü–∏–π:")
                print("========================")
                
                for (index, station) in first10Stations.enumerated() {
                    print("\(index + 1). \(station.title ?? "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")")
                    print("   üÜî –ö–æ–¥: \(station.codes?.yandex_code ?? "–Ω–µ—Ç –∫–æ–¥–∞")")
                    print("   üöä –¢–∏–ø: \(station.transport_type ?? "–Ω–µ —É–∫–∞–∑–∞–Ω")")
                    print("   üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: \(station.lat ?? 0), \(station.lng ?? 0)")
                    print("   üè∑Ô∏è –¢–∏–ø —Å—Ç–∞–Ω—Ü–∏–∏: \(station.station_type ?? "–Ω–µ —É–∫–∞–∑–∞–Ω")")
                    print("========================")
                }
                
            } catch let error as URLError where error.code == .timedOut {
                print("üî¥ –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞: —Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –≤–æ–≤—Ä–µ–º—è")
            } catch {
                print("\nüî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å—Ç–∞–Ω—Ü–∏–π:")
                print(error.localizedDescription)
            }
        }
    }
    
    func fetchCarrier() {
        Task {
            do {
                let client = Client(
                    serverURL: try Servers.Server1.url(),
                    transport: URLSessionTransport()
                )
                
                print("üü° –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–µ...")
                
                let service = CarrierService(
                    client: client,
                    apiKey: APIKeys.yandexStationKey
                )
                
                let carrierCode = "SU"
                let system = "iata"
                
                let carrier = try await service.getCarrierInfo(
                    code: carrierCode,
                    system: system
                )
                
                print("\nüü¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–µ:")
                print("üè¢ –ù–∞–∑–≤–∞–Ω–∏–µ: \(carrier.title)")
                print("üÜî –ö–æ–¥: \(carrier.code)")
                print("‚úàÔ∏è IATA –∫–æ–¥: \(carrier.codes.iata)")
                
                if let phone = carrier.phone {
                    print("üìû –¢–µ–ª–µ—Ñ–æ–Ω: \(phone)")
                }
                
                if let url = carrier.url {
                    print("üåê –°–∞–π—Ç: \(url)")
                }
                
                if let address = carrier.address {
                    print("üè† –ê–¥—Ä–µ—Å: \(address)")
                }
                
                if let logo = carrier.logo {
                    print("üñºÔ∏è –õ–æ–≥–æ—Ç–∏–ø: \(logo)")
                }
                
            } catch {
                print("\nüî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–µ:")
                print(error.localizedDescription)
            }
        }
    }
    
    func testCarrierRequest() {
        let urlString = "https://api.rasp.yandex.net/v3.0/carrier/?format=json&apikey=d7da3fd8-3adb-459e-8cf8-13283ad0685d&lang=ru_RU&code=TK&system=iata"
        
        guard let url = URL(string: urlString) else { return }
        
        URLSession.shared.dataTask(with: url) { data, response, error in
            if let error = error {
                print("üî¥ –û—à–∏–±–∫–∞: \(error)")
                return
            }
            
            if let data = data {
                if let jsonString = String(data: data, encoding: .utf8) {
                    print("üü¢ Raw response:\n\(jsonString)")
                }
            }
        }.resume()
    }
    
    func fetchNearestCity() {
        Task {
            do {
                let client = Client(
                    serverURL: try Servers.Server1.url(),
                    transport: URLSessionTransport()
                )
                
                print("üü° –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –±–ª–∏–∂–∞–π—à–∏–π –≥–æ—Ä–æ–¥...")
                
                let service = SettlementService(
                    client: client,
                    apiKey: APIKeys.yandexStationKey
                )
                
                // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞ (–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥)
                let latitude = 59.934280
                let longitude = 30.335098
                let distance = 50 // –†–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞ –≤ –∫–º (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
                
                let cityResponse = try await service.getNearestCity(
                    latitude: latitude,
                    longitude: longitude,
                    distance: distance
                )
                
                // –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–æ—Ä–æ–¥–µ
                print("\nüü¢ –ù–∞–π–¥–µ–Ω –±–ª–∏–∂–∞–π—à–∏–π –≥–æ—Ä–æ–¥:")
                print("========================")
                
                if let distance = cityResponse.distance {
                    print("üìç –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: \(String(format: "%.1f", distance)) –∫–º")
                }
                
                print("üèôÔ∏è –ù–∞–∑–≤–∞–Ω–∏–µ: \(cityResponse.title ?? "–Ω–µ —É–∫–∞–∑–∞–Ω–æ")")
                
                if let popularTitle = cityResponse.popular_title {
                    print("üèôÔ∏è –û–±—â–µ–ø—Ä–∏–Ω—è—Ç–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: \(popularTitle)")
                }
                
                if let shortTitle = cityResponse.short_title {
                    print("üèôÔ∏è –ö—Ä–∞—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: \(shortTitle)")
                }
                
                print("üÜî –ö–æ–¥: \(cityResponse.code ?? "–Ω–µ —É–∫–∞–∑–∞–Ω")")
                
                if let lat = cityResponse.lat, let lng = cityResponse.lng {
                    print("üåê –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: \(lat), \(lng)")
                }
                
                print("========================")
                
            } catch let error as DecodingError {
                print("\nüî¥ –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è:")
                switch error {
                case .typeMismatch(let type, let context):
                    print("–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–∏–ø–∞ \(type) –≤ –ø—É—Ç–∏: \(context.codingPath)")
                case .valueNotFound(let type, let context):
                    print("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ \(type) –≤ –ø—É—Ç–∏: \(context.codingPath)")
                case .keyNotFound(let key, let context):
                    print("–ù–µ –Ω–∞–π–¥–µ–Ω –∫–ª—é—á \(key) –≤ –ø—É—Ç–∏: \(context.codingPath)")
                case .dataCorrupted(let context):
                    print("–î–∞–Ω–Ω—ã–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã: \(context)")
                @unknown default:
                    print("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è")
                }
            } catch {
                print("\nüî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –±–ª–∏–∂–∞–π—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞:")
                print(error.localizedDescription)
            }
        }
    }
    
    func testFetchStations() {
        Task {
            do {
                let client = Client(
                    serverURL: try Servers.Server1.url(),
                    transport: URLSessionTransport()
                )
                let service = NearestStationsService(
                    client: client,
                    apiKey: APIKeys.yandexStationKey
                )
                print("üü° Fetching stations ...")
                let stations = try await service.getNearestStations(
                    latitude: 59.75222,
                    longitude: 30.61556,
                    distance: 50
                )
                
                let encoder = JSONEncoder()
                encoder.outputFormatting = .prettyPrinted
                let jsonData = try encoder.encode(stations)
                if let jsonString = String(data: jsonData, encoding: .utf8) {
                    DispatchQueue.main.async {
                        self.stationsInfo = jsonString
                    }
                }
                
            } catch {
                print("üî¥ Error fetchinf stations: \(error)")
            }
        }
    }
    
    func fetchCopyright() {
        print("üü¢ –ù–∞—á–∞–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–ø–∏—Ä–∞–π—Ç–µ...")
        Task {
            do {
                let client = Client(
                    serverURL: try Servers.Server1.url(),
                    transport: URLSessionTransport()
                )
                print("üîµ –ö–ª–∏–µ–Ω—Ç API —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")
                let service = CopyrightService(
                    client: client,
                    apiKey: APIKeys.yandexStationKey
                )
                print("üîµ –°–µ—Ä–≤–∏—Å –∫–æ–ø–∏—Ä–∞–π—Ç–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                print("üü° –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API...")
                let info = try await service.getCopyrightInfo()
                print("üü¢ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–ø–∏—Ä–∞–π—Ç–µ: \(info)")
                DispatchQueue.main.async {
                    self.copyrightInfo = info
                    print("üü¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ UI")
                }
            } catch {
                print("üî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫–æ–ø–∏—Ä–∞–π—Ç–∞: \(error)")
                print("üî¥ –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏: \(error.localizedDescription)")
                let errorMessage = "–û—à–∏–±–∫–∞: \(error.localizedDescription)"
                DispatchQueue.main.async {
                    self.copyrightInfo = errorMessage
                    print("üî¥ –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∞ –≤ UI")
                }
            }
        }
    }
    
    func fetchSchedule() {
        Task {
            do {
                let client = Client(
                    serverURL: try Servers.Server1.url(),
                    transport: URLSessionTransport()
                )
                print("üü° –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ...")
                
                let service = ScheduleService(
                    client: client,
                    apiKey: APIKeys.yandexStationKey
                )
                
                let scheduleResponse = try await service.getStationSchedule(
                    station: "s2000006", // –ö–æ–¥ —Å—Ç–∞–Ω—Ü–∏–∏ (–ë–µ–ª–æ—Ä—É—Å—Å–∫–∏–π –≤–æ–∫–∑–∞–ª)
                    date: "2025-07-28", // –î–∞—Ç–∞
                    transportTypes: "suburban", // –¢–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ (—ç–ª–µ–∫—Ç—Ä–∏—á–∫–∏)
                    event: "departure", // –°–æ–±—ã—Ç–∏–µ (–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ)
                    direction: "–Ω–∞ –ú–æ—Å–∫–≤—É" // –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
                )
                
                // –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è –¥–∞—Ç—ã
                let dateFormatter = DateFormatter()
                dateFormatter.dateFormat = "HH:mm"
                dateFormatter.timeZone = TimeZone(identifier: "Europe/Moscow")
                
                // –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞–Ω—Ü–∏–∏
                if let station = scheduleResponse.station {
                    print("\nüöâ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∞–Ω—Ü–∏–∏:")
                    print("""
                    üìç –ù–∞–∑–≤–∞–Ω–∏–µ: \(station.title ?? "–Ω–µ —É–∫–∞–∑–∞–Ω–æ")
                    üö¶ –¢–∏–ø: \(station.station_type_name ?? "–Ω–µ —É–∫–∞–∑–∞–Ω")
                    üè∑Ô∏è –ö–æ–¥: \(station.code ?? "–Ω–µ —É–∫–∞–∑–∞–Ω")
                    üöä –¢–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞: \(station.transport_type ?? "–Ω–µ —É–∫–∞–∑–∞–Ω")
                    """)
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
                if let schedule = scheduleResponse.schedule, !schedule.isEmpty {
                    print("\nüìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ \(scheduleResponse.date ?? "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—É—é –¥–∞—Ç—É"):")
                    print("üõ§Ô∏è –ù–∞–π–¥–µ–Ω–æ —Ä–µ–π—Å–æ–≤: \(schedule.count)")
                    
                    for (index, item) in schedule.prefix(10).enumerated() {
                        let thread = item.thread
                        print("\n\(index + 1). \(thread?.title ?? "–†–µ–π—Å –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")")
                        
                        if let departureDate = item.departure {
                            print("   üïí –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: \(dateFormatter.string(from: departureDate))")
                        }
                        
                        print("   üî¢ –ù–æ–º–µ—Ä: \(thread?.number ?? "–Ω–µ —É–∫–∞–∑–∞–Ω")")
                        print("   üö¶ –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: \(item.platform ?? "–Ω–µ —É–∫–∞–∑–∞–Ω–∞")")
                        
                        // –î–æ–±–∞–≤–ª–µ–Ω–æ: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª—É–∂–µ–±–Ω—ã–π —Ä–µ–π—Å
                        if let number = thread?.number, number.hasPrefix("0") || number.contains("x") {
                            print("   ‚ö†Ô∏è –≠—Ç–æ —Å–ª—É–∂–µ–±–Ω—ã–π/—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Ä–µ–π—Å")
                        }
                        
                        // –î–æ–±–∞–≤–ª–µ–Ω–æ: UID —Ä–µ–π—Å–∞
                        if let uid = thread?.uid {
                            print("   üîë UID: \(uid)")
                        }
                        
                        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–µ
                        if let carrier = thread?.carrier {
                            print("   üè¢ –ü–µ—Ä–µ–≤–æ–∑—á–∏–∫: \(carrier.title ?? "–Ω–µ —É–∫–∞–∑–∞–Ω")")
                            if let phone = carrier.phone {
                                print("   üìû –¢–µ–ª–µ—Ñ–æ–Ω: \(phone)")
                            }
                        }
                        
                        // –î–Ω–∏ —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
                        if let days = item.days {
                            print("   üìÖ –î–Ω–∏: \(days)")
                        }
                        
                        // –û—Å—Ç–∞–Ω–æ–≤–∫–∏
                        if let stops = item.stops {
                            print("   üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∏: \(stops)")
                        }
                        
                        // –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞–Ω—Ü–∏–∏
                        if let stationDirection = scheduleResponse.station?.direction {
                            print("   üöâ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞–Ω—Ü–∏–∏: \(stationDirection)")
                        }
                    }
                    
                    if schedule.count > 10 {
                        print("\n... –∏ –µ—â—ë \(schedule.count - 10) —Ä–µ–π—Å–æ–≤")
                    }
                } else {
                    print("\n‚ÑπÔ∏è –ù–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ—Ç")
                }
                
                // –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
                if let pagination = scheduleResponse.pagination {
                    print("\nüìä –ü–∞–≥–∏–Ω–∞—Ü–∏—è:")
                    print("–í—Å–µ–≥–æ —Ä–µ–π—Å–æ–≤: \(pagination.total)")
                    print("–õ–∏–º–∏—Ç: \(pagination.limit)")
                    print("–°–º–µ—â–µ–Ω–∏–µ: \(pagination.offset)")
                }
                
            } catch {
                print("\nüî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:")
                print("\(error.localizedDescription)")
            }
        }
    }
    
    func fetchSearch() {
        Task {
            do {
                let client = Client(
                    serverURL: try Servers.server1(),
                    transport: URLSessionTransport()
                )
                print("üü° –ü–æ–∏—Å–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –º–µ–∂–¥—É —Å—Ç–∞–Ω—Ü–∏—è–º–∏...")
                
                let service = SearchService(
                    client: client,
                    apiKey: "d7da3fd8-3adb-459e-8cf8-13283ad0685d" // –í–∞—à API –∫–ª—é—á
                )
                
                let segments = try await service.getScheduleBetweenStations(
                    from: "c146",       // –ö–æ–¥ —Å—Ç–∞–Ω—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                    to: "c213",         // –ö–æ–¥ —Å—Ç–∞–Ω—Ü–∏–∏ –ø—Ä–∏–±—ã—Ç–∏—è
                    date: "2025-09-02", // –î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
                    lang: "ru_RU",      // –Ø–∑—ã–∫ –æ—Ç–≤–µ—Ç–∞
                    format: "json",     // –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞
                    limit: 100          // –õ–∏–º–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                )
                
                // –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                print("\nüîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:")
                
                if let segmentsList = segments.segments, !segmentsList.isEmpty {
                    let dateFormatter = DateFormatter()
                    dateFormatter.dateFormat = "HH:mm"
                    dateFormatter.timeZone = TimeZone(identifier: "Europe/Moscow")
                    
                    for (index, segment) in segmentsList.enumerated() {
                        print("\n\(index + 1). \(segment.thread?.title ?? "–†–µ–π—Å –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")")
                        
                        // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–π—Å–µ
                        if let threadUid = segment.thread?.uid {
                            print("   üîë UID: \(threadUid)")
                        }
                        if let number = segment.thread?.number {
                            print("   üî¢ –ù–æ–º–µ—Ä: \(number)")
                        }
                        if let transportType = segment.thread?.transport_type {
                            print("   üöä –¢–∏–ø: \(transportType)")
                        }
                        
                        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–µ
                        if let carrier = segment.thread?.carrier {
                            print("   üè¢ –ü–µ—Ä–µ–≤–æ–∑—á–∏–∫: \(carrier.title ?? "–Ω–µ —É–∫–∞–∑–∞–Ω")")
                            print("   üî† –ö–æ–¥ –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–∞: \(carrier.code ?? 0)")
                            if let phone = carrier.phone {
                                print("   üìû –¢–µ–ª–µ—Ñ–æ–Ω: \(phone)")
                            }
                        }
                        
                        // –°—Ç–∞–Ω—Ü–∏–∏
                        if let fromStation = segment.from {
                            print("   üöâ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: \(fromStation.title ?? "–Ω–µ —É–∫–∞–∑–∞–Ω–æ") (\(fromStation.code ?? "–Ω–µ—Ç –∫–æ–¥–∞"))")
                        }
                        if let toStation = segment.to {
                            print("   üèÅ –ü—Ä–∏–±—ã—Ç–∏–µ: \(toStation.title ?? "–Ω–µ —É–∫–∞–∑–∞–Ω–æ") (\(toStation.code ?? "–Ω–µ—Ç –∫–æ–¥–∞"))")
                        }
                        
                        // –í—Ä–µ–º—è –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                        if let departure = segment.departure {
                            print("   üïí –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: \(dateFormatter.string(from: departure))")
                        }
                        if let arrival = segment.arrival {
                            print("   üïì –ü—Ä–∏–±—ã—Ç–∏–µ: \(dateFormatter.string(from: arrival))")
                        }
                        if let duration = segment.duration {
                            let hours = duration / 3600
                            let minutes = (duration % 3600) / 60
                            print("   ‚è±Ô∏è –í –ø—É—Ç–∏: \(hours)—á \(minutes)–º")
                        }
                        
                        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∏–ª–µ—Ç–∞—Ö (–µ—Å–ª–∏ –µ—Å—Ç—å)
                        if let tickets = segment.tickets_info {
                            print("   üé´ –ë–∏–ª–µ—Ç—ã: \(tickets.et_marker == true ? "–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã" : "–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")")
                        }
                        
                        // –î–Ω–∏ —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
                        if let days = segment.thread?.days {
                            print("   üìÖ –î–Ω–∏: \(days)")
                        }
                        
                        // –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã (–¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö —Ä–µ–π—Å–æ–≤)
                        if let interval = segment.thread?.interval {
                            print("   üîÑ –ò–Ω—Ç–µ—Ä–≤–∞–ª: \(interval.density ?? "–Ω–µ —É–∫–∞–∑–∞–Ω")")
                        }
                    }
                } else {
                    print("‚ÑπÔ∏è –†–µ–π—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                }
                
            } catch {
                print("\nüî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:")
                print("\(error.localizedDescription)")
            }
        }
    }
    
    func fetchThreadManually() {
        let urlString = "https://api.rasp.yandex.net/v3.0/thread/?apikey=d7da3fd8-3adb-459e-8cf8-13283ad0685d&format=json&uid=7376x6076_4_9600721_g25_4&lang=ru_RU&show_systems=all"
        guard let url = URL(string: urlString) else { return }

        URLSession.shared.dataTask(with: url) { data, response, error in
            if let error = error {
                print("üî¥ Error: \(error)")
                return
            }
            if let data = data {
                if let jsonString = String(data: data, encoding: .utf8) {
                    print("üü¢ Raw response:\n\(jsonString)")
                }
                do {
                    let decodedResponse = try JSONDecoder().decode(ThreadStationsResponse.self, from: data)
                    print("üü¢ Decoded response: \(decodedResponse)")
                } catch {
                    print("üî¥ Decoding error: \(error)")
                }
            }
        }.resume()
    }
    
    func fetchThread() {
        Task {
            do {
                let client = Client(
                    serverURL: try Servers.Server1.url(),
                    transport: URLSessionTransport()
                )
                
                print("üü° –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –º–∞—Ä—à—Ä—É—Ç–µ...")
                
                let service = ThreadService(
                    client: client,
                    apiKey: APIKeys.yandexStationKey
                )
                
                let uid = "7376x6076_4_9600721_g25_4"
                
                let response = try await client.getRouteStations(.init(
                    query: .init(
                        apikey: APIKeys.yandexStationKey,
                        uid: uid,
                        format: "json",
                        lang: "ru_RU",
                        show_systems: "all"
                    )
                ))
                
                let threadResponse = try response.ok.body.json
                
                // –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
                let dateFormatter = DateFormatter()
                dateFormatter.dateFormat = "yyyy-MM-dd HH:mm:ss"
                dateFormatter.timeZone = TimeZone(identifier: "Europe/Moscow")
                
                let timeFormatter = DateFormatter()
                timeFormatter.dateFormat = "HH:mm"
                timeFormatter.timeZone = TimeZone(identifier: "Europe/Moscow")
                
                // –í—ã–≤–æ–¥ –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞—Ä—à—Ä—É—Ç–µ
                print("\nüü¢ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ –º–∞—Ä—à—Ä—É—Ç–µ:")
                print("======================================")
                print("üöÇ \(threadResponse.title ?? "–ú–∞—Ä—à—Ä—É—Ç –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")")
                print("üî¢ –ù–æ–º–µ—Ä: \(threadResponse.number ?? "–Ω–µ —É–∫–∞–∑–∞–Ω")")
                print("üÜî UID: \(threadResponse.uid ?? "–Ω–µ —É–∫–∞–∑–∞–Ω")")
                print("üö¶ –¢–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞: \(threadResponse.transport_type ?? "–Ω–µ —É–∫–∞–∑–∞–Ω")")
                
                if let transportSubtype = threadResponse.transport_subtype {
                    print("üöÜ –ü–æ–¥—Ç–∏–ø: \(transportSubtype.title ?? "") (\(transportSubtype.code ?? ""))")
                }
                
                if let days = threadResponse.days {
                    print("üìÖ –î–Ω–∏ —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è: \(days)")
                }
                
                if let exceptDays = threadResponse.except_days, !exceptDays.isEmpty {
                    print("üö´ –ò—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ –¥–Ω–∏: \(exceptDays)")
                }
                
                if let startDate = threadResponse.start_date, let startTime = threadResponse.start_time {
                    print("‚è± –ù–∞—á–∞–ª–æ –¥–≤–∏–∂–µ–Ω–∏—è: \(startDate) –≤ \(startTime)")
                }
                
                // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–µ
                if let carrier = threadResponse.carrier {
                    print("\nüè¢ –ü–µ—Ä–µ–≤–æ–∑—á–∏–∫:")
                    print("  - –ù–∞–∑–≤–∞–Ω–∏–µ: \(carrier.title ?? "–Ω–µ —É–∫–∞–∑–∞–Ω–æ")")
                    print("  - –ö–æ–¥: \(carrier.code ?? 0)")
                    if let phone = carrier.phone {
                        print("  - –¢–µ–ª–µ—Ñ–æ–Ω: \(phone)")
                    }
                }
                
                // –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–∞—Ö
                if let stops = threadResponse.stops, !stops.isEmpty {
                    print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∏ (\(stops.count)):")
                    print("--------------------------------------------------")
                    print("‚Ññ  | –í—Ä–µ–º—è  | –°—Ç–∞–Ω—Ü–∏—è                     | –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞")
                    print("--------------------------------------------------")
                    
                    for (index, stop) in stops.enumerated() {
                        let stationName = stop.station?.title ?? "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
                        let shortStationName = String(stationName.prefix(25)).padding(toLength: 25, withPad: " ", startingAt: 0)
                        let platform = stop.platform ?? "‚Äî"
                        
                        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
                        var timeInfo = ""
                        if let departure = stop.departure, let departureDate = dateFormatter.date(from: departure) {
                            timeInfo += "‚û°Ô∏è\(timeFormatter.string(from: departureDate))"
                        }
                        if let arrival = stop.arrival, let arrivalDate = dateFormatter.date(from: arrival) {
                            if !timeInfo.isEmpty { timeInfo += " " }
                            timeInfo += "‚¨áÔ∏è\(timeFormatter.string(from: arrivalDate))"
                        }
                        
                        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
                        let stopNumber = "\(index + 1)".padding(toLength: 2, withPad: " ", startingAt: 0)
                        
                        print("\(stopNumber) | \(timeInfo.padding(toLength: 12, withPad: " ", startingAt: 0)) | \(shortStationName) | \(platform)")
                    }
                }
                
                // –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Ä—à—Ä—É—Ç–µ
                if let firstStop = threadResponse.stops?.first,
                   let lastStop = threadResponse.stops?.last {
                    print("\n‚ÑπÔ∏è –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:")
                    
                    if let departure = firstStop.departure,
                       let arrival = lastStop.arrival,
                       let departureDate = dateFormatter.date(from: departure),
                       let arrivalDate = dateFormatter.date(from: arrival) {
                        
                        let duration = arrivalDate.timeIntervalSince(departureDate)
                        let hours = Int(duration) / 3600
                        let minutes = (Int(duration) % 3600) / 60
                        
                        print("  - –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: \(timeFormatter.string(from: departureDate)) (\(firstStop.station?.title ?? "–Ω–∞—á–∞–ª—å–Ω–∞—è —Å—Ç–∞–Ω—Ü–∏—è"))")
                        print("  - –ü—Ä–∏–±—ã—Ç–∏–µ: \(timeFormatter.string(from: arrivalDate)) (\(lastStop.station?.title ?? "–∫–æ–Ω–µ—á–Ω–∞—è —Å—Ç–∞–Ω—Ü–∏—è"))")
                        print("  - –í –ø—É—Ç–∏: \(hours) —á \(minutes) –º–∏–Ω")
                    }
                }
                
                print("======================================")
                
            } catch let error as DecodingError {
                print("\nüî¥ –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è:")
                switch error {
                case .typeMismatch(let type, let context):
                    print("–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–∏–ø–∞ \(type) –≤ –ø—É—Ç–∏: \(context.codingPath)")
                case .valueNotFound(let type, let context):
                    print("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ \(type) –≤ –ø—É—Ç–∏: \(context.codingPath)")
                case .keyNotFound(let key, let context):
                    print("–ù–µ –Ω–∞–π–¥–µ–Ω –∫–ª—é—á \(key) –≤ –ø—É—Ç–∏: \(context.codingPath)")
                case .dataCorrupted(let context):
                    print("–î–∞–Ω–Ω—ã–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã: \(context)")
                @unknown default:
                    print("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è")
                }
            } catch {
                print("\nüî¥ –û—à–∏–±–∫–∞:")
                print(error.localizedDescription)
            }
        }
    }
}

#Preview {
    ConsoleScreenView().environment(\.managedObjectContext, PersistenceController.preview.container.viewContext)
}

